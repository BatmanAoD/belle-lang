// Belle implementation of a non-template vector-like type.
// The standard library will presumably implement a templated version; this is
// merely an exercise.
// This uses a "linked list of buffers" strategy.

#IntVector
{
// XXX arguably the concept of "nested classes" is of questionable utility.
  #Node
  {
    // The data members. All are "private" by default.
    ##data
      // heap-allocated array of `64` ints owned by the Node instance
      // TODO decide if there's a better way to handle the possibility of long
      // lines than `\` or `;`
      data_segment_ : *[int]#64;
      // Each segment owns the next segment
      next : *Node;
      size_ : int;

    // TODO alternate name: interface, maybe?
    ##requests
      // To prohibit deep copying, we would do this:
      // ! <-deep;
      // This is because `!` at the beginning of a declaration in the
      // `##requests` section indicates that the request is *not* recognized,
      // and `<-deep` is the "deep copy" method

      // "forward" the [] operator request to the data_segment_ member
      // ...[] syntax?
      // provide a way to be explicit about what member of data_segment is
      // actually called?
      [] :> data_segment_;

      // Allow access via pointer to member 
      // TODO control read/write here?
      // Alternate syntaxes? Explicit ->&, @next&, etc...?
      // Or should this be more explicit, and the "property syntactic sugar"
      // would go in the declaration under ##data?
      next :@ &;

      append (int n)
      {
        // Assume not full (handled by IntVector)
        self[size_] := n;
        // TODO do I really want the increment/decrement operators?
        ++size;
      }

      init_next
      {
        // The `!` shorthand is only valid in an `##init` section, so we don't
        // use it here.
        next(:Heap.Allocate);
      }

      isFull -> bool
      { size_ == 64 }

    ##init
      // See below for non-default initialization.
      // Default initialization is indicated with no arguments.
      {
        // Shorthand for data_segment_(:Heap.Allocate), a call to the
        // array-constructor for initialization via the Allocate method on the
        // default Heap object
        // TODO reconsider the choice of symbols
        ~ data_segment_;
        // Shorthand for size_() (int "default ctors" set to 0)
        size_;
        // Shorthand for next(null), which "constructs" the pointer
        // as `null`
        next;
      }
  }

  ##data
    // Could also make head a value rather than a pointer
    head_ : *Node;
    // First non-empty member of first segment
    first_ : int;
    // First empty member of last segment
    last_ : int;
    size_ : int;

  ##requests
    // Alternatively, [int n] ...?
    [] (int i) -> &int
    {
      // for this example, just assume request is within bounds (i.e. don't
      // compare to 'size')
      // `/%` divides and returns quotient AND remainder
      seg_no , index : int ( i - start_ ) /% 64;
      containing_seg : traverse(
        {|seg|
          <- 0 < seg_no--;
        }
      );
      // The last statement in a block does not need a `;`
      // <- is the "return" statement
      // <-* would be a transfer of ownership
      <- containing_seg[index]
    }

    append (int n)
    {
      // TODO decide how to handle blocks and such....Ruby and Python are both
      // nicer than C++
      // TODO pick a nice syntax (possibly keep the Ruby-ish version) for
      // passing in block-like/lambda-like expressions
      last_seg : traverse(
        {|seg|
          <- !seg.isFull;
        },
        {|seg|
          // In an expression, `!` evaluates to "is default-constructed", which in
          // this case means "is nullptr" (for ints it is equivalent to "is 0")
          // Note that functions that take no args don't need parens, since
          // they're "requests" rather than potential members.
          if (!seg.next) seg.init_next;
        }
      );
      ++size_;
      last_seg.append(n)
    }

  ##aux
    // TODO decide whether to distinguish "callable" from "symbol"
    // =! means the arg is optional, and, if not given, is a no-op
    traverse ( :condition , :operation=! ) -> &Node
    {
      seg_iter : &Node (head_);
      until (condition(seg_iter))
      {
        operation(seg_iter);
        // <- is copy-assignment, too (oo confusing?)
        seg_iter <- seg_iter.next;
      }
      <- seg_iter
    }

  ##init
    {
      ! head_;
      first_(-1);
      ~ last_;
      ~ size_;
    }
}
